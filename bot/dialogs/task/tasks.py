from typing import Dict

from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Back, Button, Row, ScrollingGroup, Select, Start
from aiogram_dialog.widgets.text import Const, Format

from core.states import MainMenuStates, TaskFormStates, TaskStates
from services.client_api import APIClient

# from api_client import APIClient


# from states import TaskStates, MainMenuStates

api_client = APIClient()


def format_task(task, index) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
    status = "‚úÖ" if task.is_completed else "‚è≥"
    categories = (
        ", ".join([cat.name for cat in task.categories])
        if task.categories
        else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )
    due_date = (
        f"\n‚è∞ –î–æ: {task.due_date.strftime('%d.%m.%Y %H:%M')}" if task.due_date else ""
    )

    return (
        f"{status} {task.title}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}"
        f"{due_date}"
    )


async def get_tasks_data(dialog_manager: DialogManager, **kwargs) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
    telegram_id = dialog_manager.event.from_user.id
    tasks = await api_client.get_tasks(telegram_id)

    return {
        "tasks": tasks,
        "tasks_count": len(tasks),
        "completed_count": len([t for t in tasks if t.is_completed]),
        "pending_count": len([t for t in tasks if not t.is_completed]),
    }


async def get_task_detail_data(dialog_manager: DialogManager, **kwargs) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    telegram_id = dialog_manager.event.from_user.id

    if not task_id:
        return {"has_task": False}

    task = await api_client.get_task_detail(telegram_id, task_id)

    if not task:
        return {"has_task": False}

    description_text = task.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    due_date_text = (
        task.due_date.strftime("%d.%m.%Y %H:%M") if task.due_date else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    )
    categories_text = (
        ", ".join([cat.name for cat in task.categories])
        if task.categories
        else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )
    toggle_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" if task.is_completed else "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"

    return {
        "task": task,
        "has_task": True,
        "task_status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.is_completed else "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
        "categories": categories_text,
        "created_at": task.created_at.strftime("%d.%m.%Y %H:%M"),
        "due_date": due_date_text,
        "toggle_text": toggle_text,
        "description_text": description_text,
    }


async def on_task_selected(
    callback, button, dialog_manager: DialogManager, item_id: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    task_id = item_id
    dialog_manager.dialog_data["selected_task_id"] = task_id
    await dialog_manager.switch_to(TaskStates.detail)


async def on_toggle_complete(callback, button, dialog_manager: DialogManager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    telegram_id = dialog_manager.event.from_user.id
    task_id = dialog_manager.dialog_data.get("selected_task_id")

    if task_id:
        success = await api_client.toggle_task_completion(telegram_id, task_id)
        if success:
            await dialog_manager.update({})


async def on_delete_task(callback, button, dialog_manager: DialogManager) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    telegram_id = dialog_manager.event.from_user.id
    task_id = dialog_manager.dialog_data.get("selected_task_id")

    if task_id:
        success = await api_client.delete_task(telegram_id, task_id)
        if success:
            await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
            await dialog_manager.switch_to(TaskStates.list)
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


async def on_edit_task(callback, button, dialog_manager: DialogManager) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    if task_id:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        telegram_id = dialog_manager.event.from_user.id
        task = await api_client.get_task_detail(telegram_id, task_id)
        if task:
            await dialog_manager.start(
                TaskFormStates.title,
                data={
                    "current_task_id": task_id,
                    "task_title": task.title,
                    "task_description": task.description,
                    "task_due_date": task.due_date,
                    "selected_category_ids": [cat.id for cat in task.categories],
                },
            )


async def on_back_to_list(callback, button, dialog_manager: DialogManager) -> None:
    await dialog_manager.switch_to(TaskStates.list)


task_list_window = Window(
    Format(
        "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏\n\n"
        "–í—Å–µ–≥–æ: {tasks_count} | ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} | ‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    ),
    ScrollingGroup(
        Select(
            Format("üìù {item.title}"),
            id="task_select",
            item_id_getter=lambda item: str(item.id),
            items="tasks",
            on_click=on_task_selected,
        ),
        id="task_scroll",
        width=1,
        height=6,
    ),
    Start(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), id="back_to_main", state=MainMenuStates.main),
    state=TaskStates.list,
    getter=get_tasks_data,
)

task_detail_window = Window(
    Format(
        "üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: {description_text}\n"
        "–°—Ç–∞—Ç—É—Å: {task_status}\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
        "–°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
        "–°—Ä–æ–∫: {due_date}\n"
    ),
    Row(
        Button(
            Format("{toggle_text}"),
            id="toggle_complete",
            on_click=on_toggle_complete,
        ),
        Button(Const("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), id="edit_task", on_click=on_edit_task),
    ),
    Row(
        Button(Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), id="delete_task", on_click=on_delete_task),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")),
    ),
    state=TaskStates.detail,
    getter=get_task_detail_data,
)

tasks_dialog = Dialog(task_list_window, task_detail_window)
