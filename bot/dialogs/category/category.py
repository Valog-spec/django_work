from typing import Dict

from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Back, Button, Row, ScrollingGroup, Select, Start
from aiogram_dialog.widgets.text import Const, Format

from core.states import CategoryFormStates, CategoryStates, MainMenuStates
from services.client_api import APIClient

api_client = APIClient()


async def get_categories_list_data(dialog_manager: DialogManager, **kwargs) -> Dict:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    telegram_id = dialog_manager.event.from_user.id
    categories = await api_client.get_categories(telegram_id)

    return {
        "categories": categories,
        "categories_count": len(categories),
        "has_categories": len(categories) > 0,
    }


async def get_category_detail_data(dialog_manager: DialogManager, **kwargs) -> Dict:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = dialog_manager.dialog_data.get("selected_category_id")
    telegram_id = dialog_manager.event.from_user.id

    if not category_id:
        return {"has_category": False}

    category = await api_client.get_category_detail(telegram_id, category_id)
    created_at = (
        category.created_at.strftime("%d.%m.%Y %H:%M")
        if category.created_at
        else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    )
    if not category:
        return {"has_category": False}

    return {
        "category": category,
        "has_category": True,
        "tasks_count": 0,
        "created_at_text": created_at,  # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    }


async def on_category_selected(
    callback, button, dialog_manager: DialogManager, item_id: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = item_id
    dialog_manager.dialog_data["selected_category_id"] = category_id
    await dialog_manager.switch_to(CategoryStates.detail)


async def on_edit_category(callback, button, dialog_manager: DialogManager) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = dialog_manager.dialog_data.get("selected_category_id")
    if category_id:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        telegram_id = dialog_manager.event.from_user.id
        category = await api_client.get_category_detail(telegram_id, category_id)
        # category = next((cat for cat in categories if cat.id == category_id), None)
        if category:
            dialog_manager.dialog_data["current_category_name"] = category.name
            await dialog_manager.start(
                CategoryFormStates.input_name,
                data={
                    "current_category_id": category_id,
                    "category_name": category.name,
                },
            )


async def on_delete_category(callback, button, dialog_manager: DialogManager) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await dialog_manager.switch_to(CategoryStates.confirm_delete)


async def on_confirm_delete(callback, button, dialog_manager: DialogManager) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    telegram_id = dialog_manager.event.from_user.id
    category_id = dialog_manager.dialog_data.get("selected_category_id")

    if category_id:
        success = await api_client.delete_category(telegram_id, category_id)
        if success:
            await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!")
            await dialog_manager.switch_to(CategoryStates.list)
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


# –û–∫–Ω–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
category_list_window = Window(
    Format(
        "üè∑Ô∏è –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    ),
    ScrollingGroup(
        Select(
            Format("üìÅ {item.name}"),
            id="category_select",
            item_id_getter=lambda item: str(item.id),
            items="categories",
            on_click=on_category_selected,
        ),
        id="category_scroll",
        width=1,
        height=6,
    ),
    Row(
        Start(
            Const("‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"),
            id="add_category",
            state=CategoryFormStates.input_name,
        ),
        Start(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), id="back_to_main", state=MainMenuStates.main),
    ),
    state=CategoryStates.list,
    getter=get_categories_list_data,
)

# –û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
category_detail_window = Window(
    Format(
        "üìã –î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: {category.name}\n"
        "–°–æ–∑–¥–∞–Ω–∞: {created_at_text}\n"
        "–ó–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {tasks_count}\n"
    ),
    Row(
        Button(
            Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"), id="edit_category", on_click=on_edit_category
        ),
        Button(Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), id="delete_category", on_click=on_delete_category),
    ),
    Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")),
    state=CategoryStates.detail,
    getter=get_category_detail_data,
)


# –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
category_confirm_delete_window = Window(
    Format(
        "üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: {category.name}\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    ),
    Row(
        Button(
            Const("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"), id="confirm_delete", on_click=on_confirm_delete
        ),
        Back(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
    ),
    state=CategoryStates.confirm_delete,
    getter=get_category_detail_data,
)

category_list_dialog = Dialog(
    category_list_window,
    category_detail_window,
    category_confirm_delete_window,
)
