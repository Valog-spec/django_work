import logging

import requests
from celery import shared_task
from django.utils import timezone

from .models import Task

logger = logging.getLogger(__name__)


@shared_task
def send_due_task_notifications() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    try:

        now = timezone.now()

        due_tasks = (
            Task.objects.filter(
                due_date__lte=now, is_completed=False, notification_sent=False,
                telegram_user_id__isnull=False
            )
            .prefetch_related("categories")
        )

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {due_tasks.count()} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        notification_count = 0
        for task in due_tasks:
            try:
                message = format_task_notification(task)

                success = send_telegram_notification(
                    task.telegram_user_id, message
                )

                if success:
                    task.notification_sent = True
                    task.save()

                    notification_count += 1
                    logger.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.telegram_user_id}"
                    )
                else:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}")

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_due_task_notifications: {e}")


def send_telegram_notification(telegram_id: int, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    try:
        api_url = f"http://backend:8000/api/send-telegram-message/"

        response = requests.post(
            api_url, json={"telegram_id": telegram_id, "message": message}, timeout=10
        )

        return response.status_code == 200

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


def format_task_notification(task) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ"""
    categories = ", ".join([cat.name for cat in task.categories.all()])
    categories_text = f"üè∑Ô∏è {categories}" if categories else ""

    message = (
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ\n\n"
        f"üìù {task.title}\n"
        f"üìÖ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"{categories_text}\n"
        f"\n–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! ‚ö†Ô∏è"
    )

    return message
